/*!
 * @jsmini/extend 0.3.3 (https://github.com/jsmini/extend)
 * API https://github.com/jsmini/extend/blob/master/doc/api.md
 * Copyright 2017-2019 jsmini. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/extend/blob/master/LICENSE)
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.jsmini_extend = {})));
}(this, (function (exports) { 'use strict';

  /*!
   * @jsmini/type 0.9.1 (https://github.com/jsmini/type)
   * API https://github.com/jsmini/type/blob/master/doc/api.md
   * Copyright 2017-2019 jsmini. All Rights Reserved
   * Licensed under MIT (https://github.com/jsmini/type/blob/master/LICENSE)
   */

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var toString = Object.prototype.toString;
  function type(x) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    strict = !!strict; // fix typeof null = object

    if (x === null) {
      return 'null';
    }

    var t = _typeof(x); // 严格模式 区分NaN和number


    if (strict && t === 'number' && isNaN(x)) {
      return 'nan';
    } // number string boolean undefined symbol


    if (t !== 'object') {
      return t;
    }

    var cls;
    var clsLow;

    try {
      cls = toString.call(x).slice(8, -1);
      clsLow = cls.toLowerCase();
    } catch (e) {
      // ie下的 activex对象
      return 'object';
    }

    if (clsLow !== 'object') {
      if (strict) {
        // 区分NaN和new Number
        if (clsLow === 'number' && isNaN(x)) {
          return 'NaN';
        } // 区分 String() 和 new String()


        if (clsLow === 'number' || clsLow === 'boolean' || clsLow === 'string') {
          return cls;
        }
      }

      return clsLow;
    }

    if (x.constructor == Object) {
      return clsLow;
    } // Object.create(null)


    try {
      // __proto__ 部分早期firefox浏览器
      if (Object.getPrototypeOf(x) === null || x.__proto__ === null) {
        return 'object';
      }
    } catch (e) {} // ie下无Object.getPrototypeOf会报错
    // function A() {}; new A


    try {
      var cname = x.constructor.name;

      if (typeof cname === 'string') {
        return cname;
      }
    } catch (e) {} // 无constructor
    // function A() {}; A.prototype.constructor = null; new A


    return 'unknown';
  }

  /*!
   * @jsmini/is 0.8.4 (https://github.com/jsmini/is)
   * API https://github.com/jsmini/is/blob/master/doc/api.md
   * Copyright 2017-2019 jsmini. All Rights Reserved
   * Licensed under MIT (https://github.com/jsmini/is/blob/master/LICENSE)
   */
  function isObject(x) {
    return type(x) === 'object';
  }
  function isFunction(x) {
    return type(x) === 'function';
  }
  var isArray = isFunction(Array.isArray) ? Array.isArray : function isArray(x) {
    return type(x) === 'array';
  };

  function hasOwnProp(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }

  var assign = isFunction(Object.assign) ? Object.assign : function assign(target) {
    if (!isObject(target)) {
      throw new TypeError('assign first param must is object');
    }

    for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
      var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

      if (isObject(source)) {
        for (var key in source) {
          if (hasOwnProp(source, key)) {
            target[key] = source[key];
          }
        }
      }
    }

    return target;
  };
  function extend() {
    return assign.apply(void 0, arguments);
  }
  function extendDeep(target) {
    // 深拷贝
    if (!isObject(target) && !isArray(target)) {
      throw new TypeError('extend target param must is object');
    }

    for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
      var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

      for (var name in source) {
        var src = target[name];
        var copy = source[name]; //避免无限循环

        if (target === copy) {
          continue;
        } // 非可枚举属性


        if (!hasOwnProp(source, name)) {
          continue;
        }

        var copyIsArr = void 0;

        if (copy && (isObject(copy) || (copyIsArr = isArray(copy)))) {
          var clone = void 0;

          if (copyIsArr) {
            clone = src && isArray(src) ? src : [];
          } else {
            clone = src && isObject(src) ? src : {};
          }

          target[name] = extendDeep(clone, copy);
        } else if (typeof copy !== 'undefined') {
          target[name] = copy;
        }
      }
    }

    return target;
  }

  exports.assign = assign;
  exports.extend = extend;
  exports.extendDeep = extendDeep;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
