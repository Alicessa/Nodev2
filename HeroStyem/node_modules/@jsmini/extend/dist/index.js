/*!
 * @jsmini/extend 0.3.3 (https://github.com/jsmini/extend)
 * API https://github.com/jsmini/extend/blob/master/doc/api.md
 * Copyright 2017-2019 jsmini. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/extend/blob/master/LICENSE)
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var is = require('@jsmini/is');

function hasOwnProp(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

var assign = is.isFunction(Object.assign) ? Object.assign : function assign(target) {
  if (!is.isObject(target)) {
    throw new TypeError('assign first param must is object');
  }

  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
    var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

    if (is.isObject(source)) {
      for (var key in source) {
        if (hasOwnProp(source, key)) {
          target[key] = source[key];
        }
      }
    }
  }

  return target;
};
function extend() {
  return assign.apply(void 0, arguments);
}
function extendDeep(target) {
  // 深拷贝
  if (!is.isObject(target) && !is.isArray(target)) {
    throw new TypeError('extend target param must is object');
  }

  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
    var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

    for (var name in source) {
      var src = target[name];
      var copy = source[name]; //避免无限循环

      if (target === copy) {
        continue;
      } // 非可枚举属性


      if (!hasOwnProp(source, name)) {
        continue;
      }

      var copyIsArr = void 0;

      if (copy && (is.isObject(copy) || (copyIsArr = is.isArray(copy)))) {
        var clone = void 0;

        if (copyIsArr) {
          clone = src && is.isArray(src) ? src : [];
        } else {
          clone = src && is.isObject(src) ? src : {};
        }

        target[name] = extendDeep(clone, copy);
      } else if (typeof copy !== 'undefined') {
        target[name] = copy;
      }
    }
  }

  return target;
}

exports.assign = assign;
exports.extend = extend;
exports.extendDeep = extendDeep;
