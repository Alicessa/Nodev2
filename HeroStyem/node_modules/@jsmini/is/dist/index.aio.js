/*!
 * @jsmini/is 0.8.5 (https://github.com/jsmini/is)
 * API https://github.com/jsmini/is/blob/master/doc/api.md
 * Copyright 2017-2019 jsmini. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/is/blob/master/LICENSE)
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.jsmini_is = {})));
}(this, (function (exports) { 'use strict';

  /*!
   * @jsmini/type 0.9.1 (https://github.com/jsmini/type)
   * API https://github.com/jsmini/type/blob/master/doc/api.md
   * Copyright 2017-2019 jsmini. All Rights Reserved
   * Licensed under MIT (https://github.com/jsmini/type/blob/master/LICENSE)
   */

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var toString = Object.prototype.toString;
  function type(x) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    strict = !!strict; // fix typeof null = object

    if (x === null) {
      return 'null';
    }

    var t = _typeof(x); // 严格模式 区分NaN和number


    if (strict && t === 'number' && isNaN(x)) {
      return 'nan';
    } // number string boolean undefined symbol


    if (t !== 'object') {
      return t;
    }

    var cls;
    var clsLow;

    try {
      cls = toString.call(x).slice(8, -1);
      clsLow = cls.toLowerCase();
    } catch (e) {
      // ie下的 activex对象
      return 'object';
    }

    if (clsLow !== 'object') {
      if (strict) {
        // 区分NaN和new Number
        if (clsLow === 'number' && isNaN(x)) {
          return 'NaN';
        } // 区分 String() 和 new String()


        if (clsLow === 'number' || clsLow === 'boolean' || clsLow === 'string') {
          return cls;
        }
      }

      return clsLow;
    }

    if (x.constructor == Object) {
      return clsLow;
    } // Object.create(null)


    try {
      // __proto__ 部分早期firefox浏览器
      if (Object.getPrototypeOf(x) === null || x.__proto__ === null) {
        return 'object';
      }
    } catch (e) {} // ie下无Object.getPrototypeOf会报错
    // function A() {}; new A


    try {
      var cname = x.constructor.name;

      if (typeof cname === 'string') {
        return cname;
      }
    } catch (e) {} // 无constructor
    // function A() {}; A.prototype.constructor = null; new A


    return 'unknown';
  }

  function isInRange(x, min, max) {
    x = +x;
    min = +min;
    max = +max; // x 不是数字，则返回false

    if (isNaN(x)) return false; // min 或 max 不传，则认为不设置下限或上限

    return (!isNaN(min) ? x >= min : true) && (!isNaN(max) ? x <= max : true);
  }
  function isNumber(x, min, max) {
    return type(x) === 'number' && isInRange(x, min, max);
  }
  function isInteger(x, min, max) {
    return parseInt(x, 10) === x && isInRange(x, min, max);
  }
  function isInt(x) {
    // -2^31 ~ 2^31-1
    return isInteger(x, -2147483648, 2147483647);
  }
  function isBoolean(x) {
    return type(x) === 'boolean';
  }
  function isString(x) {
    return type(x) === 'string';
  }
  function isEmptyString(x) {
    if (!isString(x)) return false;
    return /^\s*$/.test(x);
  }
  function isNull(x) {
    return type(x) === 'null';
  }
  function isUndefined(x) {
    return type(x) === 'undefined';
  }
  function isObject(x) {
    return type(x) === 'object';
  }
  function isFunction(x) {
    return type(x) === 'function';
  }
  var isArray = isFunction(Array.isArray) ? Array.isArray : function isArray(x) {
    return type(x) === 'array';
  };

  exports.isInRange = isInRange;
  exports.isNumber = isNumber;
  exports.isInteger = isInteger;
  exports.isInt = isInt;
  exports.isBoolean = isBoolean;
  exports.isString = isString;
  exports.isEmptyString = isEmptyString;
  exports.isNull = isNull;
  exports.isUndefined = isUndefined;
  exports.isObject = isObject;
  exports.isFunction = isFunction;
  exports.isArray = isArray;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
