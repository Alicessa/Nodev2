/*!
 * @jsmini/type 0.9.2 (https://github.com/jsmini/type)
 * API https://github.com/jsmini/type/blob/master/doc/api.md
 * Copyright 2017-2019 jsmini. All Rights Reserved
 * Licensed under MIT (https://github.com/jsmini/type/blob/master/LICENSE)
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var toString = Object.prototype.toString;
function type(x) {
  var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  strict = !!strict; // fix typeof null = object

  if (x === null) {
    return 'null';
  }

  var t = _typeof(x); // 严格模式 区分NaN和number


  if (strict && t === 'number' && isNaN(x)) {
    return 'nan';
  } // number string boolean undefined symbol


  if (t !== 'object') {
    return t;
  }

  var cls;
  var clsLow;

  try {
    cls = toString.call(x).slice(8, -1);
    clsLow = cls.toLowerCase();
  } catch (e) {
    // ie下的 activex对象
    return 'object';
  }

  if (clsLow !== 'object') {
    if (strict) {
      // 区分NaN和new Number
      if (clsLow === 'number' && isNaN(x)) {
        return 'NaN';
      } // 区分 String() 和 new String()


      if (clsLow === 'number' || clsLow === 'boolean' || clsLow === 'string') {
        return cls;
      }
    }

    return clsLow;
  }

  if (x.constructor == Object) {
    return clsLow;
  } // Object.create(null)


  try {
    // __proto__ 部分早期firefox浏览器
    if (Object.getPrototypeOf(x) === null || x.__proto__ === null) {
      return 'object';
    }
  } catch (e) {} // ie下无Object.getPrototypeOf会报错
  // function A() {}; new A


  try {
    var cname = x.constructor.name;

    if (typeof cname === 'string') {
      return cname;
    }
  } catch (e) {} // 无constructor
  // function A() {}; A.prototype.constructor = null; new A


  return 'unknown';
}

exports.type = type;
