/*!
 * template_js 2.3.0 (https://github.com/yanhaijing/template)
 * API https://github.com/yanhaijing/template/blob/master/doc/api.md
 * Copyright 2017-2019 yanhaijing. All Rights Reserved
 * Licensed under MIT (https://github.com/yanhaijing/template/blob/master/LICENSE)
 */

'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var type = require('@jsmini/type');
var extend = require('@jsmini/extend');
var parser = require('@templatejs/parser');
var runtime = _interopDefault(require('@templatejs/runtime'));

var encodeHTML = runtime.encodeHTML, compress = runtime.compress, handelError = runtime.handelError, o = runtime.o, functionMap = runtime.functionMap, modifierMap = runtime.modifierMap;
function clone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return extend.extend.apply(null, [{}].concat(args));
}
function compiler(tpl, opt) {
    if (opt === void 0) { opt = o; }
    var mainCode = parser.parse(tpl, opt);
    var headerCode = '\n' +
        '    var html = (function (__data__, __modifierMap__) {\n' +
        '        var __str__ = "", __code__ = "";\n' +
        '        for(var key in __data__) {\n' +
        '            __str__+=("var " + key + "=__data__[\'" + key + "\'];");\n' +
        '        }\n' +
        '        eval(__str__);\n\n';
    var footerCode = '\n' +
        '        ;return __code__;\n' +
        '    }(__data__, __modifierMap__));\n' +
        '    return html;\n';
    var code = headerCode + mainCode + footerCode;
    code = code.replace(/[\r]/g, ' '); // ie 7 8 会报错，不知道为什么
    try {
        var Render = new Function('__data__', '__modifierMap__', code);
        Render.toString = function () {
            return mainCode;
        };
        return Render;
    }
    catch (e) {
        e.temp = 'function anonymous(__data__, __modifierMap__) {' + code + '}';
        throw e;
    }
}
function compile(tpl, opt) {
    if (opt === void 0) { opt = o; }
    opt = clone(o, opt);
    try {
        var Render = compiler(tpl, opt);
    }
    catch (e) {
        e.name = 'CompileError';
        e.tpl = tpl;
        e.render = e.temp;
        delete e.temp;
        return handelError(e);
    }
    function render(data) {
        data = clone(functionMap, data);
        try {
            var html = Render(data, modifierMap);
            html = opt.compress ? compress(html) : html;
            return html;
        }
        catch (e) {
            e.name = 'RenderError';
            e.tpl = tpl;
            e.render = Render.toString();
            return handelError(e)();
        }
    }
    render.toString = function () {
        return Render.toString();
    };
    return render;
}
function template(tpl, data) {
    if (typeof tpl !== 'string') {
        return '';
    }
    var fn = compile(tpl);
    if (type.type(data) !== 'object') {
        return fn;
    }
    return fn(data);
}
template.config = function (option) {
    return runtime.config(option);
};
template.registerFunction = function (name, fn) {
    return runtime.registerFunction(name, fn);
};
template.unregisterFunction = function (name) {
    return runtime.unregisterFunction(name);
};
template.registerModifier = function (name, fn) {
    return runtime.registerModifier(name, fn);
};
template.unregisterModifier = function (name) {
    return runtime.unregisterModifier(name);
};
// 兼容runtime, 预编译插件可以引用runtime，也可以引用template
template.encodeHTML = encodeHTML;
template.compress = compress;
template.handelError = handelError;
template.functionMap = functionMap;
template.modifierMap = modifierMap;
// 兼容旧版本
template.__encodeHTML = encodeHTML;
template.__compress = compress;
template.__handelError = handelError;
template.__compile = compile;

module.exports = template;
