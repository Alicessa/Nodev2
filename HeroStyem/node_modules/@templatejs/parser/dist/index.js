/*!
 * @templatejs/parser 2.3.0 (https://github.com/templatejs/parser)
 * API https://github.com/templatejs/parser/blob/master/doc/api.md
 * Copyright 2017-2019 templatejs. All Rights Reserved
 * Licensed under MIT (https://github.com/templatejs/parser/blob/master/LICENSE)
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var extend = require('@jsmini/extend');

var defaultOpt = { sTag: '<%', eTag: '%>', escape: true };
function parsehtml(line) {
    // 单双引号转义
    line = String(line).replace(/('|")/g, '\\$1');
    var lineList = line.split(/\r\n|\n/);
    var code = '';
    for (var i = 0; i < lineList.length; i++) {
        code += ';__code__ += ("' + lineList[i] + (i === lineList.length - 1 ? '")\n' : '\\n")\n');
    }
    return code;
}
function parsejs(line, escape) {
    if (escape === void 0) { escape = true; }
    line = String(line);
    escape = !!escape;
    //var reg = /^(:?)(.*?)=(.*)$/;
    var reg = /^(?:=|(:.*?)=)(.*)$/;
    var html;
    var arr;
    var modifier;
    // = := :*=
    // :h=123 [':h=123', 'h', '123']
    if (arr = reg.exec(line)) {
        html = arr[2]; // 输出
        if (arr[1]) {
            // :开头
            modifier = arr[1].slice(1);
        }
        else {
            // = 开头
            modifier = escape ? 'h' : '';
        }
        return ';__code__ += __modifierMap__["' + modifier + '"](typeof (' + html + ') !== "undefined" ? (' + html + ') : "")\n';
    }
    //原生js
    return ';' + line + '\n';
}
function parse(tpl, opt) {
    if (opt === void 0) { opt = defaultOpt; }
    var _a = extend.extendDeep({}, defaultOpt, opt), sTag = _a.sTag, eTag = _a.eTag, escape = _a.escape;
    tpl = String(tpl);
    var code = '';
    var tokens = tpl.split(sTag);
    for (var i = 0, len = tokens.length; i < len; i++) {
        var token = tokens[i].split(eTag);
        if (token.length === 1) {
            // html
            // <div></div>
            code += parsehtml(token[0]);
        }
        else {
            // js
            // <%= a%>
            code += parsejs(token[0], escape);
            if (token[1]) {
                // js + html
                // <%if () {%> html <%}%>
                code += parsehtml(token[1]);
            }
        }
    }
    return code;
}

exports.parsehtml = parsehtml;
exports.parsejs = parsejs;
exports.parse = parse;
